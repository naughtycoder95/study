# \uC11C\uBC84 \uD3EC\uD2B8 : \uAE30\uBCF8\uD3EC\uD2B8(8080) -> 8000(\uBCC0\uACBD)
server.port=8000

# \uC790\uBC14 \uC18C\uC2A4\uAC00 \uC218\uC815\uB418\uBA74 \uC11C\uBC84 \uC790\uB3D9 \uC7AC\uC2DC\uC791\uC744 \uD568
spring.devtools.restart.enabled=true

# TODO: DB \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC124\uC815 : build.gradle \uC624\uB77C\uD074 db \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC5C6\uC73C\uBA74 \uC5D0\uB7EC\uBC1C\uC0DD
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@192.168.0.13:1521/xepdb1
spring.datasource.username=scott
spring.datasource.password=!Ds1234567890

# TODO: JPA \uC811\uC18D \uC124\uC815
spring.jpa.hibernate.ddl-auto=none
# todo: db \uC81C\uD488 \uC5F0\uACB0 ( oracle 12\uC774\uC0C1 : Oracle12cDialect )
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
# todo: batch size \uC124\uC815 : \uC5F0\uAD00\uAD00\uACC4 \uC124\uC815 \uC2DC N+1 \uBB38\uC81C \uCD5C\uC18C\uD654 (\uC5B4\uB178\uD14C\uC774\uC158 \uC870\uC778 \uC0AC\uC6A9)
spring.jpa.properties.hibernate.default_batch_fetch_size=1000

# TODO: \uC5C5\uB85C\uB4DC \uD30C\uC77C \uC0AC\uC774\uC988 \uC81C\uD55C \uC124\uC815 : \uAE30\uBCF8(1MB \uAE4C\uC9C0)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# TODO: \uCE74\uD504\uCE74 \uC124\uC815
# \uCE74\uD504\uCE74 \uC811\uC18D \uC124\uC815
spring.kafka.bootstrap-servers=localhost:9092
# \uC18C\uBE44\uC790\uADF8\uB8F9 \uC774\uB984 \uC124\uC815
spring.kafka.consumer.group-id=academy
# \uC624\uD504\uC14B(offset) \uC6A9\uC5B4 : \uC18C\uBE44\uC790\uAC00 \uC77D\uC740 \uBA54\uC138\uC9C0\uAE4C\uC9C0 \uD45C\uC2DC\uD574 \uB450\uB294 \uAC83
# \uC124\uC815 : earliest(\uC624\uB798\uB41C) / latest(\uCD5C\uADFC) : \uCD5C\uCD08 \uC124\uC815(offset \uC774 \uC5C6\uC74C),
#                                         \uAC11\uC790\uAE30 \uC7A5\uC560\uB4F1\uC774\uC720\uB85C \uC5C6\uC744 \uACBD\uC6B0 \uC5B4\uB5BB\uAC8C \uD560\uC9C0 \uC124\uC815
spring.kafka.consumer.auto-offset-reset=earliest
# \uB370\uC774\uD130\uB97C \uBC1B\uC544\uC62C \uB54C, key/value \uB97C \uC5ED\uC9C1\uB82C\uD654 : json -> (key, value) \uBCC0\uACBD\uC2DC \uBCC0\uD658\uC124\uC815
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# producer bootstrap servers \uAC00 \uB530\uB85C \uC874\uC7AC\uD558\uBA74 \uC124\uC815 : (key, value) -> json \uBCC0\uD658\uC124\uC815
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer





